;;
;; Type: StateInit
;; TLB: _ code:^cell data:^cell = StateInit
;;

((cell, cell)) $StateInit$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (cell vvv'code, cell vvv'data) = __tact_tuple_destroy_2(v);
    return (vvv'code, vvv'data);
}

;;
;; Type: SendParameters
;; TLB: _ bounce:bool to:address value:int257 mode:int257 body:Maybe ^cell code:Maybe ^cell data:Maybe ^cell = SendParameters
;;

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_bounce_to_value_mode_body_code_data(int $bounce, slice $to, int $value, int $mode, cell $body, cell $code, cell $data) inline {
    return ($bounce, $to, $value, $mode, $body, $code, $data);
}

((int, slice, int, int, cell, cell, cell)) $SendParameters$_constructor_to_value_mode_data_code_body(slice $to, int $value, int $mode, cell $data, cell $code, cell $body) inline {
    return (true, $to, $value, $mode, $body, $code, $data);
}

;;
;; Type: Deploy
;; Header: 0x946a98b6
;; TLB: deploy#946a98b6 queryId:uint64 = Deploy
;;

(slice, ((int))) $Deploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2490013878);
    var v'queryId = sc_0~load_uint(64);
    return (sc_0, (v'queryId));
}

;;
;; Type: DeployOk
;; Header: 0xaff90f57
;; TLB: deploy_ok#aff90f57 queryId:uint64 = DeployOk
;;

builder $DeployOk$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 2952335191, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $DeployOk$_store_cell((int) v) inline {
    return $DeployOk$_store(begin_cell(), v).end_cell();
}

((int)) $DeployOk$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: NftDeploy
;; Header: 0x8178f62e
;; TLB: nft_deploy#8178f62e query_id:uint64 index:uint256 owner:address content:^cell response_address:address = NftDeploy
;;

builder $NftDeploy$_store(builder build_0, (int, int, slice, cell, slice) v) inline {
    var (v'query_id, v'index, v'owner, v'content, v'response_address) = v;
    build_0 = store_uint(build_0, 2172188206, 32);
    build_0 = build_0.store_uint(v'query_id, 64);
    build_0 = build_0.store_uint(v'index, 256);
    build_0 = __tact_store_address(build_0, v'owner);
    build_0 = build_0.store_ref(v'content);
    build_0 = __tact_store_address(build_0, v'response_address);
    return build_0;
}

cell $NftDeploy$_store_cell((int, int, slice, cell, slice) v) inline {
    return $NftDeploy$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, slice, cell, slice))) $NftDeploy$_load(slice sc_0) inline {
    throw_unless(129, sc_0~load_uint(32) == 2172188206);
    var v'query_id = sc_0~load_uint(64);
    var v'index = sc_0~load_uint(256);
    var v'owner = sc_0~__tact_load_address();
    var v'content = sc_0~load_ref();
    var v'response_address = sc_0~__tact_load_address();
    return (sc_0, (v'query_id, v'index, v'owner, v'content, v'response_address));
}

;;
;; Type: CollectionData
;; TLB: _ next_item_index:int257 collection_content:^cell owner_address:address = CollectionData
;;

(int, cell, slice) $CollectionData$_to_external(((int, cell, slice)) v) inline {
    var (v'next_item_index, v'collection_content, v'owner_address) = v; 
    return (v'next_item_index, v'collection_content, v'owner_address);
}

((int, cell, slice)) $CollectionData$_constructor_next_item_index_collection_content_owner_address(int $next_item_index, cell $collection_content, slice $owner_address) inline {
    return ($next_item_index, $collection_content, $owner_address);
}

;;
;; Type: NftItem
;;

builder $NftItem$init$_store(builder build_0, (int, slice) v) inline {
    var (v'index, v'collection) = v;
    build_0 = build_0.store_int(v'index, 257);
    build_0 = __tact_store_address(build_0, v'collection);
    return build_0;
}

(cell, cell) $NftItem$_init_child(cell sys', int $index, slice $collection) inline_ref {
    slice sc' = sys'.begin_parse();
    cell source = sc'~load_dict();
    cell contracts = new_dict();
    
    ;; Contract Code: NftItem
    cell mine = __tact_dict_get_code(source, 31210);
    contracts = __tact_dict_set_code(contracts, 31210, mine);
    
    ;; Build cell
    builder b = begin_cell();
    b = b.store_ref(begin_cell().store_dict(contracts).end_cell());
    b = b.store_int(false, 1);
    b = $NftItem$init$_store(b, ($index, $collection));
    return (mine, b.end_cell());
}

;;
;; Type: NftCollection
;;

builder $NftCollection$_store(builder build_0, (slice, int, cell) v) inline {
    var (v'owner_address, v'next_item_index, v'collection_content) = v;
    build_0 = __tact_store_address(build_0, v'owner_address);
    build_0 = build_0.store_uint(v'next_item_index, 256);
    build_0 = build_0.store_ref(v'collection_content);
    return build_0;
}

(slice, ((slice, int, cell))) $NftCollection$_load(slice sc_0) inline {
    var v'owner_address = sc_0~__tact_load_address();
    var v'next_item_index = sc_0~load_uint(256);
    var v'collection_content = sc_0~load_ref();
    return (sc_0, (v'owner_address, v'next_item_index, v'collection_content));
}

(slice, ((slice, cell))) $NftCollection$init$_load(slice sc_0) inline {
    var v'owner = sc_0~__tact_load_address();
    var v'content = sc_0~load_ref();
    return (sc_0, (v'owner, v'content));
}

(slice, int, cell) $NftCollection$_contract_load() impure inline_ref {
    slice $sc = get_data().begin_parse();
    __tact_context_sys = $sc~load_ref();
    int $loaded = $sc~load_int(1);
    if ($loaded) {
        return $sc~$NftCollection$_load();
    } else {
        ;; Allow only workchain deployments
        throw_unless(137, my_address().preload_uint(11) == 1024);
        (slice $owner, cell $content) = $sc~$NftCollection$init$_load();
        $sc.end_parse();
        return $NftCollection$_contract_init($owner, $content);
    }
}

() $NftCollection$_contract_store((slice, int, cell) v) impure inline {
    builder b = begin_cell();
    b = b.store_ref(__tact_context_sys);
    b = b.store_int(true, 1);
    b = $NftCollection$_store(b, v);
    set_data(b.end_cell());
}