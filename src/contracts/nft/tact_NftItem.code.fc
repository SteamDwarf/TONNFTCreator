#pragma version =0.4.4;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

#include "tact_NftItem.headers.fc";
#include "tact_NftItem.stdlib.fc";
#include "tact_NftItem.storage.fc";

;;
;; Contract NftItem functions
;;

(int, int, slice, slice, cell) $NftItem$_contract_init(int $index, slice $collection) impure inline_ref {
    var (($self'init, $self'index, $self'collection_address, $self'owner_address, $self'individual_content)) = (false, null(), null(), null(), null());
    $self'index = $index;
    $self'collection_address = $collection;
    $self'owner_address = $collection;
    $self'individual_content = $global_emptyCell();
    return ($self'init, $self'index, $self'collection_address, $self'owner_address, $self'individual_content);
}

((int, int, slice, slice, cell), (int, int, slice, slice, cell)) $NftItem$_fun_get_nft_data((int, int, slice, slice, cell) $self) impure inline_ref {
    var (($self'init, $self'index, $self'collection_address, $self'owner_address, $self'individual_content)) = $self;
    var $fresh$ret_0 = $NftData$_constructor_init_index_collection_address_owner_address_individual_content($self'init, $self'index, $self'collection_address, $self'owner_address, $self'individual_content);
    return (($self'init, $self'index, $self'collection_address, $self'owner_address, $self'individual_content), $fresh$ret_0);
}

;;
;; Receivers of a Contract NftItem
;;

(((int, int, slice, slice, cell)), ()) $NftItem$_internal_binary_Transfer((int, int, slice, slice, cell) $self, (int, slice, slice, cell, int, slice) $msg) impure inline {
    var ($self'init, $self'index, $self'collection_address, $self'owner_address, $self'individual_content) = $self;
    var ($msg'query_id, $msg'new_owner, $msg'response_destination, $msg'custom_payload, $msg'forward_amount, $msg'forward_payload) = $msg;
    var ($ctx'bounced, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
    throw_unless(29170, ( __tact_slice_eq_bits($self'owner_address, __tact_context_get_sender()) ));
    slice $prev_owner = $self'owner_address;
    $self'owner_address = $msg'new_owner;
    if (($msg'forward_amount > 0)) {
        $global_send($SendParameters$_constructor_to_value_body($msg'new_owner, $msg'forward_amount, $OwnershipAssigned$_store_cell($OwnershipAssigned$_constructor_query_id_prev_owner_forward_payload($msg'query_id, $prev_owner, $msg'forward_payload))));
    }
    $global_send($SendParameters$_constructor_to_value_mode_body($msg'response_destination, 0, 66, $Excesses$_store_cell($Excesses$_constructor_query_id($msg'query_id))));
    return (($self'init, $self'index, $self'collection_address, $self'owner_address, $self'individual_content), ());
}

(((int, int, slice, slice, cell)), ()) $NftItem$_internal_binary_GetStaticData((int, int, slice, slice, cell) $self, (int) $msg) impure inline {
    var ($self'init, $self'index, $self'collection_address, $self'owner_address, $self'individual_content) = $self;
    var ($msg'query_id) = $msg;
    $global_send($SendParameters$_constructor_to_value_body(__tact_context_get_sender(), 64, $ReportStaticData$_store_cell($ReportStaticData$_constructor_query_id_index_collection($msg'query_id, $self'index, $self'collection_address))));
    return (($self'init, $self'index, $self'collection_address, $self'owner_address, $self'individual_content), ());
}

(((int, int, slice, slice, cell)), ()) $NftItem$_internal_binary_NftDeploy((int, int, slice, slice, cell) $self, (int, int, slice, cell, slice) $msg) impure inline {
    var ($self'init, $self'index, $self'collection_address, $self'owner_address, $self'individual_content) = $self;
    var ($msg'query_id, $msg'index, $msg'owner, $msg'content, $msg'response_address) = $msg;
    throw_unless(29170, ( __tact_slice_eq_bits($self'collection_address, __tact_context_get_sender()) ));
    $self'init = true;
    $self'owner_address = $msg'owner;
    $self'individual_content = $msg'content;
    $global_send($SendParameters$_constructor_to_value_mode_body($msg'response_address, 0, 66, $Excesses$_store_cell($Excesses$_constructor_query_id($msg'query_id))));
    return (($self'init, $self'index, $self'collection_address, $self'owner_address, $self'individual_content), ());
}

(((int, int, slice, slice, cell)), ()) $NftItem$_internal_binary_Deploy((int, int, slice, slice, cell) $self, (int) $deploy) impure inline {
    var ($self'init, $self'index, $self'collection_address, $self'owner_address, $self'individual_content) = $self;
    var ($deploy'queryId) = $deploy;
    ($self'init, $self'index, $self'collection_address, $self'owner_address, $self'individual_content)~$NftItem$_fun_notify($DeployOk$_store_cell($DeployOk$_constructor_queryId($deploy'queryId)));
    return (($self'init, $self'index, $self'collection_address, $self'owner_address, $self'individual_content), ());
}

;;
;; Get methods of a Contract NftItem
;;

_ %get_nft_data() method_id(102351) {
    var self = $NftItem$_contract_load();
    var res = self~$NftItem$_fun_get_nft_data();
    return $NftData$_to_external(res);
}

_ lazy_deployment_completed() method_id {
    return get_data().begin_parse().load_int(1);
}

;;
;; Routing of a Contract NftItem
;;

((int, int, slice, slice, cell), int) $NftItem$_contract_router_internal((int, int, slice, slice, cell) self, int msg_bounced, slice in_msg) impure inline_ref {
    ;; Handle bounced messages
    if (msg_bounced) {
        return (self, true);
    }
    
    ;; Parse incoming message
    int op = 0;
    if (slice_bits(in_msg) >= 32) {
        op = in_msg.preload_uint(32);
    }
    
    
    ;; Receive Transfer message
    if (op == 0x5fcc3d14) {
        var msg = in_msg~$Transfer$_load();
        self~$NftItem$_internal_binary_Transfer(msg);
        return (self, true);
    }
    
    ;; Receive GetStaticData message
    if (op == 0x2fcb26a2) {
        var msg = in_msg~$GetStaticData$_load();
        self~$NftItem$_internal_binary_GetStaticData(msg);
        return (self, true);
    }
    
    ;; Receive NftDeploy message
    if (op == 2172188206) {
        var msg = in_msg~$NftDeploy$_load();
        self~$NftItem$_internal_binary_NftDeploy(msg);
        return (self, true);
    }
    
    ;; Receive Deploy message
    if (op == 2490013878) {
        var msg = in_msg~$Deploy$_load();
        self~$NftItem$_internal_binary_Deploy(msg);
        return (self, true);
    }
    
    return (self, false);
}

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    var msg_flags = cs~load_uint(4);
    var msg_bounced = -(msg_flags & 1);
    slice msg_sender_addr = __tact_verify_address(cs~load_msg_addr());
    __tact_context = (msg_bounced, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var self = $NftItem$_contract_load();
    
    ;; Handle operation
    int handled = self~$NftItem$_contract_router_internal(msg_bounced, in_msg);
    
    ;; Throw if not handled
    throw_unless(130, handled);
    
    ;; Persist state
    $NftItem$_contract_store(self);
}
